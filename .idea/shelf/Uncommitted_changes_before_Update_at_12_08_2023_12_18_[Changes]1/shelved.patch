Index: app/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import (\r\n    render_template,\r\n    request,\r\n    redirect,\r\n    url_for,\r\n)\r\nfrom flask_login import login_required, login_user, logout_user, current_user\r\n\r\nfrom db.db_utils import Database\r\nfrom app.forms import CreateUserForm, CreateCinema\r\nfrom app.models import Films, Users\r\nfrom user.UserLogin import UserLogin\r\nfrom app import app, db, login_manager\r\nfrom .constants import PORT\r\n\r\ndbb = Database()\r\n\r\n\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    print(\"load user\")\r\n    return UserLogin().from_db(user_id)\r\n\r\n\r\n@login_manager.unauthorized_handler\r\ndef unauthorized():\r\n    return \"You must be logged in to access this page\"\r\n\r\n\r\n@app.route(\"/\")\r\ndef index():\r\n    message = \"\"\r\n    context = {\"message\": message}\r\n    return render_template(\"index.html\", **context)\r\n\r\n\r\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\r\ndef login():\r\n    message = None\r\n    if request.method == \"POST\":\r\n        password = request.form[\"password\"]\r\n        email = request.form[\"email\"]\r\n        user = Users.query.filter_by(email=email, password=password).first_or_404()\r\n        if user:\r\n            user = db.get_user_by_email(email)  # Достали пользователя по email\r\n            user = UserLogin().create(user)\r\n            login_user(user, remember=True)  # Создали пользователя и залогинили\r\n            return redirect(\"/\")\r\n        else:\r\n            message = \"Неверное имя пользователя, email или пароль\"\r\n    context = {\"message\": message}\r\n    return render_template(\"login.html\", **context)\r\n\r\n\r\n@app.route(\"/profile\")\r\n@login_required\r\ndef profile():\r\n    user_id = current_user.get_id()\r\n    # TODO реализовать функцию в db_utils для получения пользователя по id и вывести контактную информацию о нем\r\n    context = {\r\n        # \"name\": name,\r\n        # \"user_id\": user[\"id\"],\r\n        # \"email\": user[\"email\"],\r\n    }\r\n    return render_template(\"profile.html\", **context)\r\n\r\n\r\n@app.route(\"/logout\")\r\ndef logout():\r\n    logout_user()\r\n    return redirect(\"/login\")\r\n\r\n\r\n@app.route(\"/about\")\r\n@login_required\r\ndef about():\r\n    return render_template(\"about.html\")\r\n\r\n\r\n@app.route(\"/signin\", methods=[\"GET\", \"POST\"])\r\ndef create_user():\r\n    form = CreateUserForm()\r\n    email = form.email.data\r\n    message = None\r\n    if request.method == \"POST\":\r\n        if form.validate_on_submit() and db.is_email_unq(email):\r\n            name = form.name.data\r\n            password = form.password.data\r\n            db.add_user(name, email, password)\r\n            return redirect(url_for(\"success\"))\r\n        if db.is_email_unq(email) is False:\r\n            return redirect(url_for(\"unsuccess\"))\r\n        if form.validate_on_submit() is False:\r\n            message = \"Некорректный email\"\r\n    context = {\r\n        \"message\": message,\r\n    }\r\n    return render_template(\"form_users.html\", form=form, **context)\r\n\r\n\r\n@app.route(\"/form_users/success\")\r\ndef success():\r\n    return render_template(\"success.html\")\r\n\r\n\r\n@app.route(\"/form_users/unsuccess\")\r\ndef unsuccess():\r\n    return render_template(\"unsuccess.html\")\r\n\r\n\r\n@app.route(\"/add_film\", methods=[\"POST\", \"GET\"])\r\n@login_required\r\ndef add_film():\r\n    message = \"Фильм добавлен\"\r\n    if request.method == 'POST':\r\n        name = request.form['name']\r\n        description = request.form['description']\r\n        cinema_id = request.form['cinema_id']\r\n        price = request.form['price']\r\n        date_premiere = request.form['date_premiere']\r\n        count_ticket = request.form['count_ticket']\r\n        if db.is_film_unq(name):\r\n            db.add_films(name, description, cinema_id, price, date_premiere, count_ticket)\r\n            message = \"Фильм добавлен\"\r\n            return redirect(url_for(\"films\"))\r\n        else:\r\n            message = \"Такой фильм уже существует\"\r\n\r\n    context = {\r\n        \"message\": message,\r\n        # \"ids\": ids\r\n    }\r\n    return render_template(\"send_films.html\", **context)\r\n\r\n\r\n@app.route(\"/films\")\r\n@login_required\r\ndef films():\r\n    films = Films.query.all()\r\n    # films = db.get_films()\r\n    context = {\"films\": films}\r\n    return render_template(\"form_films.html\", **context)\r\n\r\n\r\n@app.route('/buy_ticket')\r\n@login_required\r\ndef buy():\r\n    # films = db.get_films()\r\n    films = Films.query.all()\r\n    context = {\r\n        'movies': films\r\n    }\r\n    return render_template(\"buy_ticket.html\", **context)\r\n\r\n\r\n@app.route('/buy_ticket/<movie_id>', methods=['GET', 'POST'])\r\n@login_required\r\ndef buy_cnt_ticket(movie_id):\r\n    movie = db.get_film_by_id(movie_id)\r\n    movie_name = movie['name']\r\n    movie_cinema = movie['cinema_id']\r\n    movie_price = movie['price']\r\n    movie_count_ticket = movie['count_ticket']\r\n    taken_tickets = db.taken_seats(movie_id)\r\n    tickets = list(range(1, movie_count_ticket + 1 - len(taken_tickets)))\r\n    if request.method == 'POST':\r\n        cnt_of_tickets = request.form['seat']\r\n        cnt_of_tickets = int(cnt_of_tickets)\r\n        movie_id = int(movie_id)\r\n        return redirect(url_for(\"buy_ticket\", cnt_of_tickets=cnt_of_tickets, movie_id=movie_id))\r\n    context = {\r\n        'movie_name': movie_name,\r\n        'movie_id': movie_id,\r\n        'movie_cinema': movie_cinema,\r\n        'movie_price': movie_price,\r\n        'movie_count_ticket': movie_count_ticket,\r\n        'tickets': tickets,\r\n    }\r\n    return render_template(\"cnttickets.html\", **context)\r\n\r\n\r\n@app.route('/buy_ticket/<movie_id>/<cnt_of_tickets>', methods=['GET', 'POST'])\r\n@login_required\r\ndef buy_ticket(movie_id, cnt_of_tickets):\r\n    movie = db.get_film_by_id(movie_id)\r\n    movie_name = movie['name']\r\n    movie_cinema = movie['cinema_id']\r\n    cnt_of_tickets = cnt_of_tickets\r\n    movie_price = movie['price']\r\n    movie_count_ticket = movie['count_ticket']\r\n    tickets = []\r\n    taken_tickets = db.taken_seats(movie_id)\r\n    for j in range(1, movie_count_ticket + 1):\r\n        if j not in taken_tickets:\r\n            tickets.append(j)\r\n    mas_of_cnt_of_tickets = list(range(1, int(cnt_of_tickets) + 1))\r\n    if request.method == 'POST':\r\n        taken_seat = []\r\n        for seats in range(1, int(cnt_of_tickets) + 1):\r\n            s = 'seat'\r\n            s += str(seats)\r\n            seat = request.form[s]\r\n            seat = int(seat[6:])\r\n            db.add_order(movie_id, seat, movie_price)\r\n            taken_seat.append(seat)\r\n        data = list(range(1, movie_count_ticket + 1))\r\n        context_2 = {\r\n            'data': data,\r\n            'taken_seat': taken_seat\r\n        }\r\n        return render_template(\"order_made.html\", **context_2)\r\n    taken_tickets = db.taken_seats(movie_id)\r\n    data = list(range(1, movie_count_ticket + 1))\r\n    context = {\r\n        'mas_of_cnt_of_tickets': mas_of_cnt_of_tickets,\r\n        'movie_name': movie_name,\r\n        'movie_id': movie_id,\r\n        'movie_cinema': movie_cinema,\r\n        'movie_price': movie_price,\r\n        'movie_count_ticket': movie_count_ticket,\r\n        'tickets': tickets,\r\n        'cnt_of_tickets': cnt_of_tickets,\r\n        'data': data,\r\n        'taken_tickets': taken_tickets\r\n\r\n    }\r\n    return render_template(\"order.html\", **context)\r\n\r\n\r\n@app.route(\"/add_cinema\", methods=[\"POST\", \"GET\"])\r\n@login_required\r\ndef add_cinemas():\r\n    cinemas = db.get_cinemas()\r\n    form = CreateCinema()\r\n    message = None\r\n    if request.method == \"POST\":\r\n        if form.validate_on_submit():\r\n            name = form.name.data\r\n            address = form.address.data\r\n            district = form.district.data\r\n            db.add_cinema(name, address, district)\r\n            return redirect(url_for(\"cinemas\"))\r\n        if form.validate_on_submit() == False:\r\n            message = \"Не хватает данных\"\r\n    context = {\"message\": message, \"cinemas\": cinemas}\r\n    return render_template(\"cinemas.html\", form=form, **context)\r\n\r\n\r\n@app.route(\"/cinemas\")\r\n@login_required\r\ndef cinemas():\r\n    cinemas = db.get_cinemas()\r\n    message = None\r\n    context = {\"message\": message, \"cinemas\": cinemas}\r\n    return render_template(\"list_cinemas.html\", **context)\r\n\r\n\r\n@app.route(\"/cinema/delete\")\r\ndef delete_cinema():\r\n    id = request.args['cinema_id']\r\n    db.delete('cinemas', 'id', int(id))\r\n    data = {\r\n        'status': 'Кинотеатр успешно удален !',\r\n        'id': id\r\n    }\r\n    return data\r\n\r\n\r\n@app.route('/adding_cinema', methods=['POST'])\r\ndef adding_cinema():\r\n    cinema_name = request.form['cinema_name']\r\n    cinema_address = request.form['cinema_address']\r\n    cinema_district = request.form['cinema_district']\r\n    db.insert('cinemas', [cinema_name, cinema_address, cinema_district], ['name', 'address', 'district'])\r\n    obj = db.get_cinema(cinema_name, cinema_address, cinema_district)\r\n    print(obj)\r\n    data = {\r\n        'status': 'success',\r\n        'obj': obj,\r\n        'id': obj[0]['id']\r\n    }\r\n    return data\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    db.create_all()\r\n    app.run(debug=True, port=PORT)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/views.py b/app/views.py
--- a/app/views.py	
+++ b/app/views.py	
@@ -281,7 +281,3 @@
     }
     return data
 
-
-if __name__ == "__main__":
-    db.create_all()
-    app.run(debug=True, port=PORT)
Index: run.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/run.py b/run.py
new file mode 100644
--- /dev/null	
+++ b/run.py	
@@ -0,0 +1,6 @@
+from app import app, db, login_manager
+from app.constants import PORT
+
+if __name__ == "__main__":
+    db.create_all()
+    app.run(debug=True, port=PORT)
